% shell, basics

# Re-call last input with sudo
sudo !!

# Define custom startup screen
sudo $EDITOR /etc/motd

# Show disc space
df -h

% shell, process

# Run a script as background process
<process> &

# Run a script as background process and save output to file
nohup <process> > /tmp/process_logs_$(date +%s) 2>&1 &

# List all running processes
ps -Af

# List all running processes for current user
ps -f

# Kill a process with process id
kill <pid>

# List process id of process running on port number
lsof -i :<port> -t

# Kill process running on port number
kill $(lsof -i :<port> -t)

# Kill a process running on a given port
lsof -i :<port> \
   | awk '{l=$2} END {print l}' \
   | xargs kill

$ pid: ps -ef --- --headers 1 --column 2 --delimiter '\s\s+'

% shell, networking

# List IP addresses connected on a given port
netstat -tn 2>/dev/null \
   | grep :<port> \
   | awk '{print $5}' \
   | cut -d: -f1 \
   | sort \
   | uniq -c \
   | sort -nr \
   | head

# Find primary, local IP address
ifconfig \
  | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' \
  | grep -Eo '([0-9]*\.){3}[0-9]*' \
  | grep -v '127.0.0.1' \
  | tail -n1

# Find external, public IP address
dig +short myip.opendns.com @resolver1.opendns.com


% shell, encryption

# Encrypt file
openssl enc -aes-256-cbc -iter 100000 -e -in <file> -out "<encrypted_out>.enc"

# Decrypt file
openssl enc -aes-256-cbc -iter 100000 -d -in <encrypted> -out <file_out>

$ file: fd --type file
$ encrypted: fd --type file --extension enc


% shell, remoting

# SSH into remote machine using current user
ssh <current_user>@<host>

# SSH into remote machine
ssh <user>@<host>

# SSH into existing ssh host from hosts file
ssh <remote_system>

# Start ssh agent
eval "$(ssh-agent -s)"; ssh-add

$ current_user: whoami
$ remote_system: cat ~/.ssh/config | grep -i "host "|sed 's/^[ \t]*//g' | awk '{print $2}'

% systemctl, service

# Start service
systemctl start <service_inactive>

# Stop service
systemctl stop <service_active>

# Enable service
systemctl enable <service_disabled>

# Disable service
systemctl disable <service_enabled>

# Restart service
systemctl restart <service>

# Reload service
systemctl reload <service_active>

# Service status
systemctl status <service>

# List running services
systemctl list-units --type=service --state=running

# List enabled services
systemctl list-unit-files --type=service --state=enabled

# List disabled services
systemctl list-unit-files --type=service --state=disabled

$ service_inactive: systemctl list-units --type=service --state=inactive | awk '{print $1}' | grep .service | sed 's/.service$//'
$ service_active: systemctl list-units --type=service --state=active | awk '{print $1}' | grep .service | sed 's/.service$//'
$ service_enabled: systemctl list-unit-files --type=service --state=enabled | awk '{print $1}' | grep .service | sed 's/.service$//'
$ service_disabled: systemctl list-unit-files --type=service --state=disabled | awk '{print $1}' | grep .service | sed 's/.service$//'
$ service: systemctl list-units --type=service --all | awk '{print $1}' | grep .service | sed 's/.service$//'