#!/usr/bin/env bash

if has mise; then
    use_mise() {
        direnv_load mise direnv exec
    }
fi

pip_install() {
    req_file=$1
    if has uv; then
        uv pip install -r "$req_file"
    else
        pip install -r "$req_file"
    fi
}

create_venv() {
    if [ ! -d .venv ]; then
        if has uv; then
            uv venv
        else
            "$(mise which python)" -m venv .venv
        fi
    fi
}

configure_python() {
    version=$1
    watch_file requirements.txt
    test -d .venv || create_venv
    # shellcheck disable=SC1091
    . .venv/bin/activate
    log_status "Using $(python --version) from $(which python)"

    # check and see if there is a default packages file
    if [ -n "$MISE_PYTHON_DEFAULT_PACKAGES_FILE" ]; then
        if [ ! -f .mise/.default_packages_installed ] || [ "$(cat .mise/.default_packages_installed)" != "$(md5sum "$MISE_PYTHON_DEFAULT_PACKAGES_FILE")" ]; then
            log_status "Installing default packages from $MISE_PYTHON_DEFAULT_PACKAGES_FILE"
            pip_install "$MISE_PYTHON_DEFAULT_PACKAGES_FILE"
            md5sum "$MISE_PYTHON_DEFAULT_PACKAGES_FILE" > .mise/.default_packages_installed
        fi
    fi
    
    # check and see if there is an existing requirements checksum file
    if [ -f .mise/.reqsum ]; then
        reqsum=$(cat .mise/.reqsum)
        if [ "$reqsum" != "$(md5sum requirements.txt)" ]; then
            log_status "requirements.txt has changed, updating dependencies"
            pip_install "requirements.txt"
            md5sum requirements.txt > .mise/.reqsum
        fi
    elif [ -f requirements.txt ]; then
        log_status "Running pip install -r requirements.txt to install dependencies"
        pip_install "requirements.txt"
        md5sum requirements.txt > .mise/.reqsum
    else
        log_status "No requirements.txt file found, skipping pip install"
    fi
}

layout_mise() {
    use mise
    if [ -z "$MISE_ENV" ]; then
        MISE_CONFIG_FILE=".mise/config.toml"
    else
        MISE_CONFIG_FILE=".mise/$MISE_ENV/config.toml"
    fi
    # for each function argument, get tool and version and add to config file
    mise use --path "$MISE_CONFIG_FILE" "$@"
    for arg in "$@"; do
        tool=$(echo "$arg" | cut -d@ -f1)
        version=$(echo "$arg" | cut -d@ -f2)
        # find a function named configure_$tool and run it
        if declare -f "configure_$tool" > /dev/null; then
            "configure_$tool" "$version"
        fi
    done
    dotenv_if_exists .env
}