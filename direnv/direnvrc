#!/usr/bin/env bash

if has mise; then
    use_mise() {
        direnv_load mise direnv exec
    }
fi

pip_install() {
    req_file=$1
    if has uv; then
        uv pip install -r "$req_file"
    else
        pip install -r "$req_file"
    fi
}

create_venv() {
    if [ ! -d .venv ]; then
        if has uv; then
            uv venv
        else
            $(mise which python) -m venv .venv
        fi
    fi
}

layout_mpython() {
    
    dotenv_if_exists .env
    watch_file requirements.txt
    use mise
    # run mise which python --version to get the python version to use, if the command fails, use the default python.
    # don't output the command to the console
    if mise which python --version > /dev/null; then
        pyversion=$(mise which python --version)
    else
        py_version=${1:-"latest"}
        mise use --path .mise/config.toml "python@${py_version}"
        pyversion=$(mise which python --version)
    fi
    log_status "Using python version: $pyversion"

    test -d .venv || create_venv
    # shellcheck disable=SC1091
    . .venv/bin/activate

    # check and see if there is a default packages file
    if [ -n "$MISE_PYTHON_DEFAULT_PACKAGES_FILE" ]; then
        if [ ! -f .mise/.default_packages_installed ] || [ "$(cat .mise/.default_packages_installed)" != "$(md5sum "$MISE_PYTHON_DEFAULT_PACKAGES_FILE")" ]; then
            log_status "Installing default packages from $MISE_PYTHON_DEFAULT_PACKAGES_FILE"
            pip_install "$MISE_PYTHON_DEFAULT_PACKAGES_FILE"
            md5sum "$MISE_PYTHON_DEFAULT_PACKAGES_FILE" > .mise/.default_packages_installed
        fi
    fi
    
    # check and see if there is an existing requirements checksum file
    if [ -f .mise/.reqsum ]; then
        reqsum=$(cat .mise/.reqsum)
        if [ "$reqsum" != "$(md5sum requirements.txt)" ]; then
            log_status "requirements.txt has changed, updating dependencies"
            pip_install "requirements.txt"
            md5sum requirements.txt > .mise/.reqsum
        fi
    elif [ -f requirements.txt ]; then
        log_status "Running pip install -r requirements.txt to install dependencies"
        pip_install "requirements.txt"
        md5sum requirements.txt > .mise/.reqsum
    else
        log_status "No requirements.txt file found, skipping pip install"
    fi
}

layout_mterraform() {
    dotenv_if_exists .env
    use mise
    if mise which terraform --version > /dev/null; then
        tfversion=$(mise which terraform --version)
    else
        mise use --path .mise/config.toml terraform@latest
        tfversion=$(mise which terraform --version)
    fi
    log_status "Using terraform version: $tfversion"
}