#!/usr/bin/env sh

set -e

path_add() {
    local f_path=$1
    if [ -d "$f_path" ] && [ ":$PATH:" != *":$f_path:"* ]; then
        export PATH="${PATH:+"$PATH:"}:${f_path}"
    fi
}

log_info() {
    message=$1
    echo "\033[1;34m[INFO]\033[0m $message"
}

log_error() {
    error_code=${2:-1}
    message=$1
    printf "\033[1;31m[ERROR]\033[0m $message (ec: \033[1;31m$error_code\033[0m)\n"
    exit "$error_code"
}

log_warn() {
    message=$1
    printf "\033[1;33m[WARN]\033[0m $message"
}

log_success() {
    message=$1
    printf "\033[1;32m[SUCCESS]\033[0m $message\n"
}

link() {
    source=$1
    destination=$2
    if [ -f "$destination" ] || [ -d "$destination" ]; then
        # if the destination file or directory exists and is not a symlink, create a backup
        if [ ! -L "$destination" ]; then
            # Get the basename of the file or directory
            dest_base=$(basename "$destination")
            # Backup file or directory name
            dest_bak="$HOME/.cache/dotfiles/$dest_base.bak"
            log_info "backup $destination"
            mkdir -p "$HOME/.cache/dotfiles"
            mv "$destination" "$dest_bak"
        else
            # if the destination is a symlink, remove the symlink
            log_info "unlink $destination"
            rm "$destination"
        fi
    fi
    parent_dir=$(dirname "$destination")
    mkdir -p "$parent_dir"
    ln -sfn "$source" "$destination"
    log_success "linked $source <-> $destination"
}

detect_os() {
    # Detect the operating system
    if [ -f /etc/os-release ]; then
        # Most Linux distributions have this file
        . /etc/os-release
        if [ "$ID" = "ubuntu" ] || [ "$ID_LIKE" = "ubuntu" ] || [ "$ID_LIKE" = "debian" ] && [ "$ID" = "ubuntu" ]; then
            echo "ubuntu"
            return 0
        elif [ "$ID" = "alpine" ]; then
            echo "alpine"
            return 0
        elif [ "$ID" = "rhel" ] || [ "$ID" = "centos" ] || [ "$ID_LIKE" = "rhel" ] || [ "$ID_LIKE" = "fedora" ] && [ "$ID" = "rhel" ]; then
            echo "redhat"
            return 0
        elif [ "$ID" = "arch" ] || [ "$ID_LIKE" = "arch" ]; then
            echo "archlinux"
            return 0
        elif [ "$ID" = "fedora" ]; then
            echo "fedora"
            return 0
        fi
    fi
    
    # Check for macOS
    if [ "$(uname)" = "Darwin" ]; then
        echo "macos"
        return 0
    fi
    
    # Additional checks for specific distributions
    if [ -f /etc/redhat-release ]; then
        echo "redhat"
        return 0
    elif [ -f /etc/arch-release ]; then
        echo "archlinux"
        return 0
    elif [ -f /etc/alpine-release ]; then
        echo "alpine"
        return 0
    elif [ -f /etc/fedora-release ]; then
        echo "fedora"
        return 0
    elif [ -f /etc/lsb-release ]; then
        grep -qi "ubuntu" /etc/lsb-release && { echo "ubuntu"; return 0; }
    fi
    
    # If we couldn't determine the OS, return an error
    log_error "Could not determine the operating system" 2
    return 2
}

has() {
  command -v "$1" 1>/dev/null 2>&1
}

required() {
    cmd=$1
    ec=${2:-1}
    if ! has "$cmd"; then
        log_error "$cmd is required." "$ec"
    fi
}

ensure_homebrew() {
    if ! has brew; then
        log_info "Installing Homebrew..."
        if ! NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" < /dev/null; 
        then
            log_error "Homebrew installation failed."
        fi
        log_success "Homebrew installed successfully."
    else
        log_info "Brew already installed at $(which brew)"
    fi
}

add_common_paths() {
    # Adding homebrew bin directory to PATH
    path_add "/opt/homebrew/bin"
    path_add "/home/linuxbrew/.linuxbrew/bin"
    # Adding user custom bin directory to PATH
    path_add "$HOME/.local/bin"
    path_add "$HOME/bin"
}

check_prerequisites() {
    required "git"
    required "curl"
}

configure_shell() {
    # Link bashenv and zshenv to preload all features
    link "$DOTFILES/shell/env" "$HOME/.bashenv"
    link "$DOTFILES/shell/env" "$HOME/.zshenv"

    # Link bashrc and zshrc
    link "$DOTFILES/shell/bash/.bashrc" "$HOME/.bashrc"
    link "$DOTFILES/shell/zsh/.zshrc" "$HOME/.zshrc"

    # Link SSH Configuration
    link "$DOTFILES/ssh/config" "$HOME/.ssh/config"
    link "$DOTFILES/ssh/allowed_signers" "$HOME/.ssh/allowed_signers"
    chmod 600 "$HOME/.ssh/config"

    # Link httpie config file in the default config directory
    link "$DOTFILES/httpie/config.json" "$HOME/.config/httpie/config.json"

    # Link pip config file
    link "$DOTFILES/pip/pip.conf" "$HOME/.pip/pip.conf"

    # Link gitconfig
    link "$DOTFILES/git/.gitconfig" "$HOME/.gitconfig"

    # Link direnv config
    link "$DOTFILES/direnv/direnvrc" "$HOME/.config/direnv/direnvrc"
    link "$DOTFILES/direnv/direnv.toml" "$HOME/.config/direnv/direnv.toml"

    # Link git config
    link "$DOTFILES/git/.gitconfig" "$HOME/.gitconfig"
    link "$DOTFILES/git/.gitignore" "$HOME/.config/git/.gitignore"
    link "$DOTFILES/git/commit-template.txt" "$HOME/.config/git/commit-template.txt"

    # Link npm config
    link "$DOTFILES/npm/.npmrc" "$HOME/.npmrc"

    # Link UV config
    link "$DOTFILES/uv/uv.toml" "$HOME/.config/uv/uv.toml"

    # Link alacritty configuration
    link "$DOTFILES/alacritty/alacritty.toml" "$HOME/.config/alacritty/alacritty.toml"

    # Link tmux configuration
    link "$DOTFILES/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"
}

cleanup() {
    log_info "Cleaning up temporary files..."
    # Remove any dead symlinks
    find "$HOME" -xtype l -exec rm -f {} \;
    log_success "Cleanup completed."
}

main() {
    os=$(detect_os)
    DOTFILES=$(cd "$(dirname "$0")" && pwd)

    trap cleanup EXIT
    
    log_info "Setting up the machine ($os) with dotfiles ${DOTFILES}"

    add_common_paths
    check_prerequisites

    # alpine doesn't support homebrew, ensure homebrew is installed in all other OSes.
    if [ "$os" != "alpine" ]; then
        ensure_homebrew
    fi
    
    add_common_paths

    # installing the bundled packages
    log_info "Installing packages from Brewfile"
    brew bundle --file="$DOTFILES/Brewfile"

    configure_shell
}

main "$@"